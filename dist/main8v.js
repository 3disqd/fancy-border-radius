!function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="http://localhost:8080/dist/",t(t.s=5)}([function(n,e,t){var o=t(1);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(3)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,'/* ==========================================================================\n   Normalize.scss settings\n   ========================================================================== */\n/**\n * Includes legacy browser support IE6/7\n *\n * Set to false if you want to drop support for IE6 and IE7\n */\n/* Base\n   ========================================================================== */\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using\n *  `em` units.\n */\nhtml {\n  font-family: sans-serif;\n  /* 1 */\n  -ms-text-size-adjust: 100%;\n  /* 2 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */ }\n\n/**\n * Remove default margin.\n */\nbody {\n  margin: 0; }\n\n/* HTML5 display definitions\n   ========================================================================== */\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block; }\n\n/**\n * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  /* 1 */\n  vertical-align: baseline;\n  /* 2 */ }\n\n/**\n * Prevents modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\naudio:not([controls]) {\n  display: none;\n  height: 0; }\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n[hidden],\ntemplate {\n  display: none; }\n\n/* Links\n   ========================================================================== */\n/**\n * Remove the gray background color from active links in IE 10.\n */\na {\n  background-color: transparent; }\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\na:active, a:hover {\n  outline: 0; }\n\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\nabbr[title] {\n  border-bottom: 1px dotted; }\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\nb,\nstrong {\n  font-weight: bold; }\n\n/**\n * Address styling not present in Safari and Chrome.\n */\ndfn {\n  font-style: italic; }\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; }\n\n/**\n * Addresses styling not present in IE 8/9.\n */\nmark {\n  background: #ff0;\n  color: #000; }\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\nsmall {\n  font-size: 80%; }\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsup {\n  top: -0.5em; }\n\nsub {\n  bottom: -0.25em; }\n\n/* Embedded content\n   ========================================================================== */\n/**\n * 1. Remove border when inside `a` element in IE 8/9/10.\n * 2. Improves image quality when scaled in IE 7.\n */\nimg {\n  border: 0; }\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\nsvg:not(:root) {\n  overflow: hidden; }\n\n/* Grouping content\n   ========================================================================== */\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\nfigure {\n  margin: 1em 40px; }\n\n/**\n * Address differences between Firefox and other browsers.\n */\nhr {\n  box-sizing: content-box;\n  height: 0; }\n\n/**\n * Contain overflow in all browsers.\n */\npre {\n  overflow: auto; }\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.\n */\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em; }\n\n/* Forms\n   ========================================================================== */\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n/**\n * 1. Correct color not being inherited.\n *  Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n * 4. Improves appearance and consistency in all browsers.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n  margin: 0;\n  /* 3 */ }\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\nbutton {\n  overflow: visible; }\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\nbutton,\nselect {\n  text-transform: none; }\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *  and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *  `input` and others.\n * 4. Removes inner spacing in IE 7 without affecting normal text inputs.\n *  Known issue: inner spacing remains in IE 6.\n */\nbutton,\nhtml input[type="button"],\ninput[type="reset"],\ninput[type="submit"] {\n  -webkit-appearance: button;\n  /* 2 */\n  cursor: pointer;\n  /* 3 */ }\n\n/**\n * Re-set default cursor for disabled elements.\n */\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default; }\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0; }\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\ninput {\n  line-height: normal; }\n\n/**\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n *  Known issue: excess padding remains in IE 6.\n */\ninput[type="checkbox"],\ninput[type="radio"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Fix the cursor style for Chrome\'s increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\ninput[type="number"]::-webkit-inner-spin-button,\ninput[type="number"]::-webkit-outer-spin-button {\n  height: auto; }\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\ninput[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  box-sizing: content-box;\n  /* 2 */ }\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\n/**\n * Define consistent border, margin, and padding.\n */\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em; }\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren\'t caught out if they zero out fieldsets.\n * 3. Corrects text not wrapping in Firefox 3.\n * 4. Corrects alignment displayed oddly in IE 6/7.\n */\nlegend {\n  border: 0;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\ntextarea {\n  overflow: auto; }\n\n/**\n * Don\'t inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\noptgroup {\n  font-weight: bold; }\n\n/* Tables\n   ========================================================================== */\n/**\n * Remove most spacing between table cells.\n */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\ntd,\nth {\n  padding: 0; }\n\n@keyframes morph {\n  0% {\n    border-radius: 40% 60% 60% 40% / 70% 30% 70% 30%; }\n  100% {\n    border-radius: 40% 60%; } }\n\n@keyframes spin {\n  to {\n    transform: rotate(1turn); } }\n\n*,\n*:before,\n*:after {\n  box-sizing: border-box; }\n\nhtml,\nbody {\n  background: #000022;\n  color: white;\n  font-family: \'M PLUS Rounded 1c\', sans-serif;\n  overflow-x: hidden; }\n\n.alert {\n  position: fixed;\n  left: 50%;\n  top: 30%;\n  transform: translate(-50%, 0);\n  color: #000022;\n  font-size: 1.5rem;\n  pointer-events: none;\n  z-index: 100;\n  padding: 1em;\n  background: rgba(255, 255, 255, 0.8);\n  border-radius: 0.5em;\n  white-space: nowrap; }\n\n.footer {\n  background: rgba(255, 255, 255, 0.15);\n  min-height: 2.5rem;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 1rem;\n  line-height: 2.5rem; }\n  .footer__heart {\n    padding: 0 0.125em;\n    color: #3023AE; }\n  .footer a {\n    text-decoration: none;\n    color: rgba(255, 255, 255, 0.8); }\n    .footer a:hover {\n      text-decoration: underline; }\n\n.header {\n  margin: 0 0 1rem;\n  text-align: center;\n  position: relative;\n  z-index: 10; }\n  .header__links {\n    margin: 0.5em auto 0;\n    padding-top: 0.25em;\n    max-width: 18.75rem;\n    border-top: 1px solid rgba(255, 255, 255, 0.5); }\n    .header__links a {\n      font-size: 0.75rem;\n      color: #FF0099;\n      text-decoration: none;\n      padding: 0 0.5rem;\n      opacity: 0.8;\n      transition: opacity 0.3s ease-out; }\n      .header__links a svg {\n        width: 1.35em;\n        height: 1.35em;\n        display: inline-block;\n        fill: #FFFFFF;\n        vertical-align: middle;\n        margin-top: -0.125rem; }\n      .header__links a:hover {\n        opacity: 1; }\n    @media screen and (min-width: 33rem) {\n      .header__links {\n        margin-top: 1em;\n        padding-top: 0.5em; }\n        .header__links a {\n          font-size: 0.875rem; } }\n\nh1 {\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  color: rgba(255, 255, 255, 0.8);\n  line-height: 1;\n  margin: 0 0 0.125em;\n  letter-spacing: 0.01em;\n  text-align: center; }\n  @media screen and (min-height: 36.25rem) and (min-width: 25rem) {\n    h1 {\n      font-size: 2rem; } }\n\n.container {\n  min-height: calc(100vh - 2.5rem);\n  padding-top: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: space-evenly;\n  overflow: hidden;\n  position: relative; }\n  .container::before, .container::after {\n    content: "";\n    width: 70vmax;\n    height: 70vmax;\n    position: absolute;\n    background: rgba(255, 255, 255, 0.07);\n    left: -20vmin;\n    top: -20vmin;\n    animation: morph 15s linear infinite alternate, spin 20s linear infinite;\n    z-index: 1;\n    will-change: border-radius, transform;\n    transform-origin: 55% 55%;\n    pointer-events: none; }\n  .container::after {\n    width: 70vmin;\n    height: 70vmin;\n    left: auto;\n    right: -10vmin;\n    top: auto;\n    bottom: 0;\n    animation: morph 10s linear infinite alternate, spin 26s linear infinite reverse;\n    transform-origin: 20% 20%; }\n\n.generator {\n  width: 60vmin;\n  height: 60vmin;\n  border: 2px dashed rgba(255, 255, 255, 0.4);\n  position: relative;\n  z-index: 3;\n  margin-left: auto;\n  margin-right: auto; }\n  @media screen and (min-width: 31.875rem) {\n    .generator {\n      width: 50vmin;\n      height: 50vmin; } }\n  .generator__shape {\n    width: 100%;\n    height: 100%;\n    background: #FF0099;\n    background-image: linear-gradient(45deg, #3023AE 0%, #FF0099 100%);\n    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;\n    box-shadow: -10vmin 10vmin 0 rgba(255, 255, 255, 0.07); }\n    .generator__shape--8v {\n      border-radius: 10%;\n      background-image: linear-gradient(-225deg, #FFFFFF 0%, rgba(255, 255, 255, 0) 40%, rgba(0, 255, 255, 0) 60%, #0ff 100%), linear-gradient(45deg, #3023AE 0%, #FF0099 100%); }\n  .generator__handle {\n    display: block;\n    position: absolute;\n    cursor: pointer;\n    width: 2.5rem;\n    height: 2.5rem; }\n    .generator__handle:before {\n      content: "";\n      position: absolute;\n      width: 1rem;\n      height: 1rem;\n      left: 0.75rem;\n      top: 0.75rem;\n      background: #FFFFFF;\n      border: 2px solid #000022;\n      transition: box-shadow 0.2s ease-out;\n      will-change: box-shadow; }\n    .generator__handle--second:before {\n      background: #3023AE;\n      border: 2px solid #FFFFFF; }\n    .generator__handle--third:before {\n      background: #FF0099;\n      border: 2px solid #FFFFFF; }\n    .generator__handle--fourth:before {\n      background: #0ff; }\n    .generator__handle--8v.active:before, .generator__handle--8v:hover:before {\n      box-shadow: 0 0 0 4px #FFF;\n      border: 2px solid #000022; }\n    .generator__handle:not(.generator__handle--8v).active:before, .generator__handle:not(.generator__handle--8v):hover:before {\n      background: #0ff;\n      box-shadow: 0 0 0 4px #FFF;\n      border: 2px solid #000022; }\n  .generator #top {\n    top: -1.25rem;\n    left: 30%;\n    transform: translateX(-50%); }\n    .generator #top.generator__handle--8v {\n      left: 10%; }\n  .generator #bottom {\n    bottom: -1.25rem;\n    left: 30%;\n    transform: translateX(-50%); }\n    .generator #bottom.generator__handle--8v {\n      left: 10%; }\n  .generator #left {\n    left: -1.25rem;\n    top: 30%;\n    transform: translateY(-50%); }\n    .generator #left.generator__handle--8v {\n      top: 10%; }\n  .generator #right {\n    right: -1.25rem;\n    top: 30%;\n    transform: translateY(-50%); }\n    .generator #right.generator__handle--8v {\n      top: 10%; }\n  .generator #top_r {\n    top: -1.25rem;\n    left: 90%;\n    transform: translateX(-50%); }\n  .generator #bottom_r {\n    bottom: -1.25rem;\n    left: 90%;\n    transform: translateX(-50%); }\n  .generator #left_b {\n    left: -1.25rem;\n    top: 90%;\n    transform: translateY(-50%); }\n  .generator #right_b {\n    right: -1.25rem;\n    top: 90%;\n    transform: translateY(-50%); }\n\n.output {\n  width: 90%;\n  text-align: left;\n  margin-top: 1.5em;\n  font-size: 1.125rem;\n  line-height: 1.5;\n  margin-left: auto;\n  margin-right: auto; }\n  .output__label {\n    flex: 0 0 auto;\n    margin-bottom: 0.5em;\n    margin-right: 1em;\n    color: rgba(255, 255, 255, 0.9); }\n  .output__code {\n    display: block;\n    font-family: \'Ubuntu Mono\', monospace;\n    flex-grow: 1;\n    color: #000022;\n    background: #ccc;\n    padding: 0.5em 0.625em;\n    border-radius: 2px;\n    margin-bottom: 0.5em; }\n  .output__button {\n    display: block;\n    border-radius: 2px;\n    background: #FF0099;\n    border: none;\n    color: rgba(255, 255, 255, 0.9);\n    padding: 0.5em 1em;\n    font-weight: bold;\n    width: 100%;\n    transition: background 0.3s ease-out;\n    will-change: background;\n    cursor: pointer; }\n    .output__button:hover {\n      background: #3023AE; }\n  @media screen and (min-width: 30.875rem) {\n    .output {\n      font-size: 1.25rem; }\n      .output__code {\n        border-radius: 2px 0 0 2px;\n        flex-grow: 1;\n        margin-bottom: 0; }\n      .output__button {\n        flex-shrink: 1;\n        border-radius: 0 2px 2px 0;\n        width: auto;\n        text-transform: uppercase;\n        letter-spacing: 0.1em; } }\n  @media screen and (min-width: 43rem) {\n    .output {\n      display: flex;\n      justify-content: stretch;\n      align-items: baseline;\n      max-width: 39rem; } }\n\n.advanced {\n  width: 90%;\n  max-width: 39rem;\n  text-align: left;\n  margin: 0.5em auto;\n  position: relative;\n  z-index: 5;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.9); }\n  @media screen and (min-width: 560px) {\n    .advanced {\n      font-size: 1.25rem; } }\n  .advanced__switch {\n    padding: 0.5em 0;\n    flex-shrink: 0;\n    margin-bottom: 0.5em; }\n  .advanced__settings {\n    display: none; }\n    .advanced__settings.visible {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column; }\n      @media screen and (min-width: 31.25rem) {\n        .advanced__settings.visible {\n          flex-direction: row; } }\n  .advanced__check {\n    visibility: hidden;\n    width: 0;\n    height: 0;\n    display: block;\n    border: none; }\n  .advanced .input-group {\n    align-items: center;\n    margin-left: 1em;\n    margin-bottom: 0.5em;\n    justify-content: space-between;\n    display: flex; }\n    .advanced .input-group label {\n      display: block;\n      margin-right: 0.5em; }\n    .advanced .input-group input[type="number"] {\n      width: 4.5rem; }\n  .advanced__check:checked + .advanced__trigger span:after {\n    background: #FF0099;\n    left: 1.15em;\n    border-radius: 37% 63% 55% 45% / 25% 50% 50% 75%; }\n  .advanced__trigger {\n    display: block;\n    line-height: 1;\n    cursor: pointer; }\n    .advanced__trigger span {\n      display: inline-block;\n      width: 2em;\n      height: 1em;\n      border-radius: 0.5em;\n      background: rgba(255, 255, 255, 0.8);\n      vertical-align: bottom;\n      position: relative; }\n      @media screen and (min-width: 43rem) {\n        .advanced__trigger span {\n          margin-left: 2rem; } }\n      .advanced__trigger span:after {\n        content: "";\n        position: absolute;\n        width: 0.7em;\n        height: 0.7em;\n        border-radius: 50% 56% 29% 70% / 50% 73% 38% 50%;\n        background: #000022;\n        position: absolute;\n        left: 0.15em;\n        top: 0.15em;\n        transition: left 0.3s ease-out, background 0.3s ease-out, border-radius 0.4s ease-in-out; }\n\n.input-group input {\n  border-radius: 2px;\n  border: none;\n  background: #FFFFFF;\n  font-family: \'Ubuntu Mono\', monospace;\n  color: #000022;\n  padding: 0.5em 0.625em; }\n\n@media screen and (min-width: 30.85rem) {\n  .input-group {\n    display: flex;\n    align-items: stretch;\n    flex-grow: 1;\n    margin-bottom: 0; } }\n',""])},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var i=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(o),r=o.sources.map(function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"});return[t].concat(r).concat([i]).join("\n")}return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(o[r]=!0)}for(i=0;i<n.length;i++){var a=n[i];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var o={},i=function(n){var e;return function(){return void 0===e&&(e=n.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),r=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var o=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}}(),a=null,s=0,d=[],l=t(4);function c(n,e){for(var t=0;t<n.length;t++){var i=n[t],r=o[i.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(b(i.parts[a],e))}else{var s=[];for(a=0;a<i.parts.length;a++)s.push(b(i.parts[a],e));o[i.id]={id:i.id,refs:1,parts:s}}}}function u(n,e){for(var t=[],o={},i=0;i<n.length;i++){var r=n[i],a=e.base?r[0]+e.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};o[a]?o[a].parts.push(s):t.push(o[a]={id:a,parts:[s]})}return t}function h(n,e){var t=r(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===n.insertAt)o?o.nextSibling?t.insertBefore(e,o.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),d.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=r(n.insertAt.before,t);t.insertBefore(e,i)}}function f(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=d.indexOf(n);e>=0&&d.splice(e,1)}function p(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var o=function(){0;return t.nc}();o&&(n.attrs.nonce=o)}return m(e,n.attrs),h(n,e),e}function m(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function b(n,e){var t,o,i,r;if(e.transform&&n.css){if(!(r=e.transform(n.css)))return function(){};n.css=r}if(e.singleton){var d=s++;t=a||(a=p(e)),o=v.bind(null,t,d,!1),i=v.bind(null,t,d,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",m(e,n.attrs),h(n,e),e}(e),o=function(n,e,t){var o=t.css,i=t.sourceMap,r=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||r)&&(o=l(o));i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([o],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),i=function(){f(t),t.href&&URL.revokeObjectURL(t.href)}):(t=p(e),o=function(n,e){var t=e.css,o=e.media;o&&n.setAttribute("media",o);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){f(t)});return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else i()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=u(n,e);return c(t,e),function(n){for(var i=[],r=0;r<t.length;r++){var a=t[r];(s=o[a.id]).refs--,i.push(s)}n&&c(u(n,e),e);for(r=0;r<i.length;r++){var s;if(0===(s=i[r]).refs){for(var d=0;d<s.parts.length;d++)s.parts[d]();delete o[s.id]}}}};var g=function(){var n=[];return function(e,t){return n[e]=t,n.filter(Boolean).join("\n")}}();function v(n,e,t,o){var i=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=g(e,i);else{var r=document.createTextNode(i),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(r,a[e]):n.appendChild(r)}}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,o=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var i,r=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?n:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?t+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(n,e,t){"use strict";t.r(e);t(0);function o(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}var i=function(){function n(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"x",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:30;!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.axis=o,this.pos=i,this.elem=e,this.onChange=t,this.elem.onmousedown=this.dragMouseDown.bind(this),this.elem.ontouchstart=this.dragMouseDown.bind(this),this.setInitPos(i),this.onChange(this.pos,this.elem.id)}return function(n,e,t){e&&o(n.prototype,e),t&&o(n,t)}(n,[{key:"dragMouseDown",value:function(n){(n=n||window.event).preventDefault(),this.currentSpan=n.target,this.currentSpan.classList.add("active"),document.onmouseup=this.closeDragElement.bind(this),document.ontouchend=this.closeDragElement.bind(this),document.onmousemove=this.elementDrag.bind(this),document.ontouchmove=this.elementDrag.bind(this)}},{key:"elementDrag",value:function(n){if(n=n||window.event,"undefined"!=typeof TouchEvent&&n instanceof TouchEvent){var e=n.changedTouches[0];this.setPos(e.clientX,e.clientY)}else this.setPos(n.clientX,n.clientY)}},{key:"setInitPos",value:function(n){"x"==this.axis?this.elem.style.left=n+"%":this.elem.style.top=n+"%"}},{key:"setPos",value:function(n,e){var t=this.elem.parentNode.getBoundingClientRect();"x"==this.axis?(this.pos=this.valBetween((100*(n-5-t.x).toFixed(0)/t.width).toFixed(0),0,100),this.elem.style.left=this.pos+"%"):(this.pos=this.valBetween((100*(e-5-t.y).toFixed(0)/t.height).toFixed(0),0,100),this.elem.style.top=this.pos+"%"),this.onChange(this.pos,this.elem.id)}},{key:"closeDragElement",value:function(){this.currentSpan.classList.remove("active"),document.onmouseup=null,document.onmousemove=null,document.ontouchend=null,document.ontouchmove=null}},{key:"valBetween",value:function(n,e,t){return Math.min(t,Math.max(e,n))}}]),n}();function r(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}var a=function(){function n(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=t.shapeElemId,i=void 0===o?"shape":o,r=t.generatorElemId,a=void 0===r?"code":r,s=t.copyCodeId,d=void 0===s?"copy":s,l=t.copiedCodeId,c=void 0===l?"clipboard_copied":l,u=t.boxContainerId,h=void 0===u?"box":u,f=t.widthInputId,p=void 0===f?"width":f,m=t.heightInputId,b=void 0===m?"height":m,g=t.enableAdvancedId,v=void 0===g?"enable-advanced":g,y=t.initState,w=void 0===y?null:y,x=t.moveableElems;!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.generatorElem=document.getElementById(a),this.shapeElem=document.getElementById(i),this.copiedCode=document.getElementById(c),this.boxContainer=document.getElementById(h),this.widthInput=document.getElementById(p),this.heightInput=document.getElementById(b),this.widthInput.onchange=function(){e.updateState(e.widthInput.value,"width")},this.heightInput.onchange=function(){e.updateState(e.heightInput.value,"height")},this.enableAdvanced=document.getElementById(v),this.enableAdvanced.onclick=this.enableAdvancedOnClick.bind(this),this.initState(w),this.initAdvanced(),this.handles=this.initHandles(x),document.getElementById(d).onclick=this.setClipboard.bind(this)}return function(n,e,t){e&&r(n.prototype,e),t&&r(n,t)}(n,[{key:"initHandles",value:function(n){throw new Error("You have to implement the method initHandles!")}},{key:"updateBorderRadius",value:function(){throw new Error("You have to implement the method updateBorderRadius!")}},{key:"initState",value:function(n){throw new Error("You have to implement the method initState!")}},{key:"initAdvanced",value:function(){""!==this.state.width&&""!==this.state.height&&(this.enableAdvanced.checked=!0,document.getElementById("dimension-input").classList.add("visible"))}},{key:"enableAdvancedOnClick",value:function(n){this.enableAdvanced.checked?(document.getElementById("dimension-input").classList.add("visible"),this.state.width=this.boxContainer.offsetWidth,this.state.height=this.boxContainer.offsetHeight,this.updateUI()):(document.getElementById("dimension-input").classList.remove("visible"),this.updateState("","width"),this.updateState("","height"))}},{key:"setClipboard",value:function(){var n=this;this.copyToClipboard(this.generatorElem.innerHTML),this.copiedCode.innerHTML='<div class="alert">Copied to clipboard 👍</div>',setTimeout(function(){n.copiedCode.innerHTML=""},2e3)}},{key:"updateState",value:function(n,e){this.state[e]=n,this.updateUI()}},{key:"updateUI",value:function(){this.updateBorderRadius(),this.updateBox(),this.saveUrlParams()}},{key:"updateBox",value:function(){if(this.enableAdvanced.checked){var n=""==this.state.height?"":this.state.height+"px",e=""==this.state.width?"":this.state.width+"px";this.boxContainer.style.height=n,this.boxContainer.style.width=e,this.heightInput.value=this.state.height,this.widthInput.value=this.state.width}}},{key:"saveUrlParams",value:function(){throw new Error("You have to implement the method saveUrlParams!")}},{key:"copyToClipboard",value:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}]),n}();function s(n){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function d(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function l(n,e){return!e||"object"!==s(e)&&"function"!=typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function c(n){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function u(n,e){return(u=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}var h=function(n){function e(){return function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,c(e).apply(this,arguments))}return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&u(n,e)}(e,a),function(n,e,t){e&&d(n.prototype,e),t&&d(n,t)}(e,[{key:"initState",value:function(n){this.state=null==n?{left:10,right:10,top:10,bottom:10,left_b:90,right_b:90,top_r:90,bottom_r:90,width:"",height:"",advancedMode:!1}:n}},{key:"initHandles",value:function(n){return{left:new i(n.left,this.updateState.bind(this),"y",this.state.left),right:new i(n.right,this.updateState.bind(this),"y",this.state.right),top:new i(n.top,this.updateState.bind(this),"x",this.state.top),bottom:new i(n.bottom,this.updateState.bind(this),"x",this.state.bottom),left_b:new i(n.left_b,this.updateState.bind(this),"y",this.state.left_b),right_b:new i(n.right_b,this.updateState.bind(this),"y",this.state.right_b),top_r:new i(n.top_r,this.updateState.bind(this),"x",this.state.top_r),bottom_r:new i(n.bottom_r,this.updateState.bind(this),"x",this.state.bottom_r)}}},{key:"updateBorderRadius",value:function(){var n=this.state.top+"% ";n+=100-this.state.top_r+"% ",n+=100-this.state.bottom_r+"% ",n+=this.state.bottom+"% / ",n+=this.state.left+"% ",n+=this.state.right+"% ",n+=100-this.state.right_b+"% ",n+=100-this.state.left_b+"% ",this.shapeElem.style["border-radius"]=n,this.generatorElem.innerHTML=n}},{key:"saveUrlParams",value:function(){var n=this.state,e=n.left,t=n.top,o=n.right,i=n.bottom,r=n.width,a=n.height,s=n.left_b,d=n.top_r,l=n.right_b,c=n.bottom_r,u="#".concat(e,".").concat(t,".").concat(o,".").concat(i,"-").concat(s,".").concat(d,".").concat(l,".").concat(c,"-").concat(a,".").concat(r);window.location.hash=u}}]),e}();document.getElementById("box"),new h({moveableElems:{left:document.getElementById("left"),right:document.getElementById("right"),bottom:document.getElementById("bottom"),top:document.getElementById("top"),left_b:document.getElementById("left_b"),right_b:document.getElementById("right_b"),bottom_r:document.getElementById("bottom_r"),top_r:document.getElementById("top_r")},initState:function(n){var e,t=/#(\d\d?)\.(\d\d?)\.(\d\d?)\.(\d\d?)-(?:(\d\d?)\.(\d\d?)\.(\d\d?)\.(\d\d?))?-(\d*).(\d*)/gm,o=["left","top","right","bottom","left_b","top_r","right_b","bottom_r","height","width"],i={};if(!t.test(n))return null;for(t.lastIndex=0;null!==(e=t.exec(n));)e.forEach(function(n,e){0!=e&&(i[o[e-1]]=n)});return i}(window.location.href)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,